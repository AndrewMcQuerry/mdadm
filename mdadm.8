.\" -*- nroff -*-
.TH MDADM 8
.SH NAME
mdadm \- manage MD devices
.I aka
Linux Software Raid.

.SH SYNOPSIS

.BI mdadm " [mode] <raiddevice> [options] <component-devices>"

.SH DESCRIPTION 
RAID devices are virtual devices created from two or more
real block devices. This allows multiple devices (typically disk
drives or partitions there-of) to be combined into a single device to
hold (for example) a single filesystem.
Some RAID levels include redundancy and so can survive some degree of
device failure.

Linux Software RAID devices are implemented through the md (Multiple
Devices) device driver.

Currently, Linux supports
.B LINEAR
md devices,
.B RAID0
(striping),
.B RAID1
(mirroring),
.B RAID4
and
.B RAID5.

Recent kernels (2002) also support a mode known as
.BR MULTIPATH .
.B mdadm
only provides limited support for MULTIPATH as yet.

.B mdadm
is a program that can be used to create, manage, and monitor
MD devices.  As
such it provides a similar set of functionality to the
.B raidtools
packages.
The key differences between
.B mdadm
and
.B raidtools
are:
.IP \(bu 4
.B mdadm
is a single program and not a collection of programs.
.IP \(bu 4
.B mdadm
can perform (almost) all of its functions without having a
configuration file.  Also
.B mdadm
helps with management of the configuration
file.
.IP \(bu 4
.B mdadm
can provide information about your arrays (through Query, Detail, and Examine)
that
.B  raidtools
cannot.

.SH MODES
mdadm has 6 major modes of operation:
.TP
.B Assemble
Assemble the parts of a previously created
array into an active array. Components can be explicitly given
or can be searched for. 
.B mdadm
checks that the components
do form a bona fide array, and can, on request, fiddle superblock
information so as to assemble a faulty array.

.TP
.B Build
Build a legacy array without per-device superblocks.

.TP
.B Create
Create a new array with per-device superblocks.
'''It can progress
'''in several step create-add-add-run or it can all happen with one command.

.TP
.B Manage
This is for doing things to specific components of an array such as
adding new spares and removing faulty devices.

.TP
.B Misc
This mode allows operations on independent devices such as examine MD
superblocks, erasing old superblocks and stopping active arrays.

.TP
.B "Follow or Monitor"
Monitor one or more md devices and act on any state changes.

.SH OPTIONS

Available options are:

.TP
.BR -A ", " --assemble
Assemble a pre-existing array.

.TP
.BR -B ", " --build
Build a legacy array without superblocks.

.TP
.BR -C ", " --create
Create a new array.

.TP
.BR -Q ", " --query
Examine a device to see
(1) if it is an md device and (2) if it is a component of an md
array.
Information about what is discovered is presented.

.TP
.BR -D ", " --detail
Print detail of one or more md devices.

.TP
.BR -E ", " --examine
Print content of md superblock on device(s).

.TP
.BR -F ", " --follow ", " --monitor
Select
.B Monitor
mode.

.TP
.BR -h ", " --help
Display help message or, after above option, mode specific help message.

.TP
.BR -V ", " --version
Print version information for mdadm.

.TP
.BR -v ", " --verbose
Be more verbose about what is happening.

.TP
.BR -b ", " --brief
Be less verbose.  This is used with
.B --detail
and
.BR --examine .

.TP
.BR -f ", " --force
Be more forceful about certain operations.  See the various modes of
the exact meaning of this option in different contexts.

.TP
.BR -c ", " --config=
Specify the config file.  Default is
.BR /etc/mdadm.conf .

.TP
.BR -s ", " --scan
scan config file or
.B /proc/mdstat
for missing information.
In general, this option gives
.B mdadm
permission to get any missing information, like component devices,
array devices, array identities, and alert destination from the
configuration file:
.BR /etc/mdadm.conf .
One exception is MISC mode when using
.B --detail
or
.B --stop
in which case
.B --scan
says to get a list of array devices from
.BR /proc/mdstat .

.SH For create or build:

.TP
.BR -c ", " --chunk=
Specify chunk size of kibibytes.  The default is 64.

.TP
.BR --rounding=
Specify rounding factor for linear array (==chunk size)

.TP
.BR -l ", " --level=
Set raid level.  Options are: linear, raid0, 0, stripe, raid1, 1, mirror, raid5, 4,
raid5, 5, multipath, mp.  Obviously some of these are synonymous.
Only the first 4 are valid when Building.

.TP
.BR -p ", " --parity=
Set raid5 parity algorithm. Options are:
left-asymmetric,
left-symmetric,
right-asymmetric,
right-symmetric,
la, ra, ls, rs.  The default is left-symmetric.

.TP
.BR --layout=
same as --parity

.TP
.BR -n ", " --raid-devices=
number of active devices in array.

.TP
.BR -x ", " --spare-devices=
number of spare (eXtra) devices in initial array.  Spares can be added
and removed later.

.TP
.BR -z ", " --size=
Amount (in Kibibytes) of space to use from each drive in RAID1/4/5.
This must be a multiple of the chunk size, and must leave about 128Kb
of space at the end of the drive for the RAID superblock.
If this is not specified
(as it normally is not) the smallest drive (or partition) sets the
size, though if there is a variance among the drives of greater than 1%, a warning is
issued.

.SH For assemble:

.TP
.BR -u ", " --uuid=
uuid of array to assemble. Devices which don't have this uuid are
excluded

.TP
.BR -m ", " --super-minor=
Minor number of device that array was created for.  Devices which
don't have this minor number are excluded.  If you create an array as
/dev/md1, then all superblocks will contain the minor number 1, even if
the array is later assembled as /dev/md2.

.TP
.BR -f ", " --force
Assemble the array even if some superblocks appear out-of-date

.TP
.BR -R ", " --run
Attempt to start the array even if fewer drives were given than are
needed for a full array. Normally if not all drives are found and
.B --scan
is not used, then the array will be assembled but not started.
With
.B --run
an attempt will be made to start it anyway.

.SH For Manage mode:

.TP
.BR -a ", " --add
'''add, or
hotadd listed devices.

.TP
.BR -r ", " --remove
remove listed devices.  They must not be active.  i.e. they should
be failed or spare devices.

.TP
.BR -f ", " --fail
mark listed devices as faulty.

.TP
.BR --set-faulty
same as --fail.

.SH For Misc mode:

.TP
.BR -R ", " --run
start a partially built array.

.TP
.BR -S ", " --stop
deactivate array, releasing all resources.

.TP
.BR -o ", " --readonly
mark array as readonly.

.TP
.BR -w ", " --readwrite
mark array as readwrite.

.TP
.B --zero-superblock
If the device contains a valid md superblock, the block is
over-written with zeros.  With
--force
the block where the superblock would be is over-written even if it
doesn't appear to be valid.

.SH For Monitor mode:
.TP
.BR -m ", " --mail
Give a mail address to send alerts to.

.TP
.BR -p ", " --program ", " --alert
Give a program to be run whenever an event is detected.

.TP
.BR -d ", " --delay
Give a delay in seconds.
.B mdadm
polls the md arrays and then waits this many seconds before polling
again.  The default is 60 seconds.

.SH ASSEMBLE MODE

.HP 12
Usage:
.B mdadm --assemble
.I device options...
.HP 12
Usage:
.B mdadm --assemble --scan
.I  options...

.PP
This usage assembles one or more raid arrays from pre-existing components.
For each array, mdadm needs to know the md device, the identity of the
array, and a number of component-devices. These can be found in a number of ways.

The md device is either given before 
.B --scan
or is found from the config file. In the latter case, multiple md devices
can be started with a single mdadm command.

The identity can be given with the 
.B --uuid
option, with the
.B --super-minor
option, can be found in in the config file, or will be taken from the
super block on the first component-device listed on the command line.

Devices can be given on the 
.B --assemble
command line or from the config file. Only devices which have an md
superblock which contains the right identity will be considered for any device.

The config file is only used if explicitly named with 
.B --config
or requested with 
.B --scan. 
In the later case,
.B /etc/mdadm.conf
is used.

If 
.B --scan
is not given, then the config file will only be used to find the
identity of md arrays.

Normally the array will be started after it is assembled.  However if
.B --scan
is not given and insufficient drives were listed to start a complete
(non-degraded) array, then the array is not started (to guard against
usage errors).  To insist that the array be started in this case (as
may work for RAID1 or RAID5), give the
.B --run
flag.


.SH BUILD MODE

.HP 12
Usage:
.B mdadm --build
.I device
.BI --chunk= X
.BI --level= Y
.BI --raid-devices= Z
.I devices

.PP
This usage is similar to 
.BR --create .
The difference is that it creates a legacy array without a superblock. With
these arrays there is no difference between initially creating the array and
subsequently assembling the array, except that hopefully there is useful
data there in the second case.

The level may only be 0, raid0, or linear. All devices must be listed
and the array will be started once complete.

.SH CREATE MODE

.HP 12
Usage:
.B mdadm --create
.I device
.BI --chunk= X
.BI --level= Y
.br
.BI --raid-devices= Z
.I  devices

.PP
This usage will initialise a new md array, associate some devices with
it, and activate the array.

As devices are added, they are checked to see if they contain raid
superblocks or filesystems. They are also checked to see if the variance in
device size exceeds 1%.

If any discrepancy is found, the array will not automatically be run, though
the presence of a 
.B --run
can override this caution.

To create a "degraded" array in which some devices are missing, simply
give the word
.B missing
in place of a device name.  This will cause
.B mdadm
to leave the corresponding slot in the array empty.
For a RAID4 or RAID5 array at most one slot can be
.BR missing .
For a RAID1 array, only one real device needs to be given.  All of the
others can be
.BR missing .

'''If the 
'''.B --size
'''option is given, it is not necessary to list any component-devices in this command.
'''They can be added later, before a
'''.B --run. 
'''If no 
'''.B --size
'''is given, the apparent size of the smallest drive given is used.

The General Management options that are valid with --create are:
.TP
.B --run
insist of running the array even if some devices look like they might
be in use.

.TP
.B --readonly
start the array readonly - not supported yet.

.SH MANAGE MODE
.HP 12
Usage:
.B mdadm
.I device
.I options... devices...
.PP

This usage will allow individual devices in an array to be failed,
removed or added.  It is possible to perform multiple operations with
on command. For example:
.br
.B "  mdadm /dev/md0 -f /dev/hda1 -r /dev/hda1 /a /dev/hda1"
.br
will firstly mark
.B /dev/hda1
as faulty in
.B /dev/md0
and will then remove it from the array and finally add it back
in as a spare.  However only one md array can be affected by a single
command. 

.SH MISC MODE
.HP 12
Usage:
.B mdadm
.I options ...
.I devices  ...
.PP

MISC mode includes a number if distinct operations that
operate on distinct devices.  The operations are:
.TP
--query
The device is examined to see if it is
(1) an active md array, or
(2) a component of an md array.
The information discovered is reported.

.TP
--detail
The device should be an active md device.
.B   mdadm
will display a detailed description of the array.
.B --brief
or
.B --scan
will cause the output to be less detailed and the format to be
suitable for inclusion in
.BR /etc/mdadm.conf .

.TP
--examine
The device should be a component of an md array.
.B mdadm
will read the md superblock of the device and display the contents.
If
.B --brief
is given, or
.B --scan
then multiple devices that are components of the one array
are grouped together and reported in a single entry suitable
for inclusion in
.BR /etc/mdadm.conf .

Having
.B --scan
without listing any devices will cause all devices listed in the
config file to be examined.

.TP
--stop
This devices should active md arrays which will be deactivated, if
they are not currently in use.

.TP
--run
This will fully activate a partially assembled md array.

.TP
--readonly
This will mark an active array as read-only, providing that it is
not currently being used.

.TP
--readwrite
This will change a
.B readonly
array back to being read/write.

.TP
--scan
For all operations except
.BR --examine ,
.B --scan
will cause the operation to be applied to all arrays listed in
.BR /proc/mdstat .
For
.BR --examine,
.B --scan
causes all devices listed in the config file to be examined.


.SH MONITOR MODE

.HP 12
Usage:
.B mdadm --monitor
.I options... devices...

.PP
This usage causes
.B mdadm
to periodically poll a number of md arrays and to report on any events
noticed.
.B mdadm
will never exit once it decides that there are arrays to be checked,
so it should normally be run in the background.

As well as reporting events,
.B mdadm
may move a spare drive from one array to another if they are in the
same
.B spare-group
and if the destination array has a failed drive but not spares.

If any devices are listed on the command line,
.B mdadm
will only monitor those devices. Otherwise all arrays listed in the
configuration file will be monitored.  Further, if
.B --scan
is given, then any other md devices that appear in
.B /proc/mdstat
will also be monitored.

The result of monitoring the arrays is the generation of events.
These events are passed to a separate program (if specified) and may
be mailed to a given E-mail address.

When passing event to program, the program is run once for each event
and is given 2 or 3 command-line arguements.  The first is the
name of the event (see below).  The second is the name of the
md device which is affected, and the third is the name of a related
device if relevant, such as a component device that has failed.

If
.B --scan
is given, then a program or an E-mail address must be specified on the
command line or in the config file.  If neither are available, then
.B mdadm
will not monitor anything.
Without
.B --scan
.B mdadm
will continue monitoring as long as something was found to monitor.  If
no program or email is given, then each event is reported to
.BR stdout .

The different events are:

.RS 4
.TP
.B DeviceDisappeared
An md array which previously was configured appears to no longer be
configured.

.TP
.B RebuildStarted
An md array started reconstruction.

.TP
.BI Rebuild NN
Where
.I NN
is 20, 40, 60, or 80, this indicates that rebuild has passed that many
percentage of the total.

.TP
.B Fail
An active component device of an array has been marked as faulty.

.TP
.B FailSpare
A spare component device which was being rebuilt to replace a faulty
device has failed.

.TP
.B SpareActive
A spare component device which was being rebuilt to replace a faulty
device as been successfully rebuild and has been made active.

.TP
.B NewArray
A new md array has been detected in the
.B /proc/mdstat
file.

.TP
.B MoveSpare
A spare drive has been moved from one array in a
.B spare-group
to another to allow a failed drive to be replaced.

.RE

Only
.B Fail
and
.B FailSpare
cause Email to be sent.  All events cause the program to be run.
The program is run with two or three arguments, they being the event
name, the array device and possibly a second device.

Each event has an associated array device (e.g.
.BR /dev/md1 )
and possibly a second device.  For
.BR Fail ,
.BR FailSpare ,
and
.B SpareActive
the second device is the relevant component device.
For
.B MoveSpare
the second device is the array that the spare was moved from.

For
.B mdadm
to move spares from one array to another, the different arrays need to
be labelled with the same
.B spare-group
in the configuration file.  The
.B spare-group
name can be any string. It is only necessary that different spare
groups use different names.

When
.B mdadm
detects that an array which is in a spare group has fewer active
devices than necessary for the complete array, and has no spare
devices, it will look for another array in the same spare group that
has a full complement of working drive and a spare.  It will then
attempt to remove the spare from the second drive and add it to the
first.
If the removal succeeds but the adding fails, then it is added back to
the original array.

.SH EXAMPLES

To find out if a devices is a raid array or part of one:
.br
.B "  mdadm -Q /dev/name-of-device"

To assemble and start all array listed in the standard config file:
.br
.B "  mdadm -As"

To shut down all arrays (that are not still in used):
.br
.B "  mdadm --stop --scan"

To monitor all arrays if (and only if) an email address or program
was given in the config file, but poll every 2 minutes:
.br
.B "  mdadm -Fs --delay=120"

To create /dev/md0 as a RAID1 array with /dev/hda1 and /dev/hdc1:
.br
.B "  mdadm -C /dev/md0 -l1 -n2 /dev/hd[ac]1"

To create prototype a config file that describes currently
active arrays that are known to be made from partitions of
IDE or SCSI drives:
.br
.B "  echo 'DEVICE /dev/hd*[0-9] /dev/sd*[0-9]' > mdadm.conf"
.br
.B "  mdadm --detail --scan >> mdadm.conf"
.br
This file should be reviewed before being used as it may
contain unwanted detail.

To find out what raid arrays could be assembled from existing
IDE and SCSI whole drives (not partitions):
.br
.B "  echo 'DEVICE /dev/hd[a-z] /dev/sd*[a-z]' > mdadm.conf"
.br
.B "  mdadm -Es -c mdadm.conf >> mdadm.conf"
This file is very likely to contain unwanted detail, particularly
the
.B devices=
entries.

To get help about Create mode:
.br
.B "  mdadm --create --help"

To get help about the format of the config file:
.br
.B "  mdadm --config --help"

To get general help:
.br
.B "  mdadm --help"




.SH FILES

.SS /proc/mdstat

If you're using the 
.B /proc 
filesystem,
.B /proc/mdstat
lists all active md devices with information about them.
.B mdadm
uses this to find arrays when
.B --scan
is given in Misc mode, and to monitor array reconstruction
on Monitor mode.


.SS /etc/mdadm.conf

The config file lists which devices may be scanned to see if
they contain MD super block, and gives identifying information
(e.g. UUID) about known MD arrays.  See
.BR mdadm.conf (5)
for more details.


.SH NOTE
.B mdadm
was previously known as
.BR mdctl .
 
.SH SEE ALSO
For information on the various levels of
RAID, check out:

.IP
.UR   http://ostenfeld.dk/~jakob/Software-RAID.HOWTO/
http://ostenfeld.dk/~jakob/Software-RAID.HOWTO/
.UE
.PP
for new releases of the RAID driver check out:

.IP
.UR  ftp://ftp.kernel.org/pub/linux/kernel/people/mingo/raid-patches
ftp://ftp.kernel.org/pub/linux/kernel/people/mingo/raid-patches
.UE
.PP
or
.IP
.UR http://www.cse.unsw.edu.au/~neilb/patches/linux-stable/
http://www.cse.unsw.edu.au/~neilb/patches/linux-stable/
.URk
.PP
.BR mdadm.conf (5),
.BR md (4).
.PP
.IR raidtab (5),
.IR raid0run (8),
.IR raidstop (8),
.IR mkraid (8)
